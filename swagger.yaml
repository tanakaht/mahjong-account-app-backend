openapi: 3.0.0
info:
  title: mahjong-account-app-backend
  version: 1.0.0
  description: Lambda API for mahjong-account-app-backend(user management, rules, and matches).

securityDefinitions:
  cogniteUserPool:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: cognito_user_pools
    x-amazon-apigateway-authorizer:
      providerARNs:
        # - ${UserPool.Arn}
        - Fn::Sub: arn:aws:cognito-idp:ap-northeast-1:${AWS::AccountId}:userpool/${UserPool}
      type: cognito_user_pools

paths:
  /users/confirmation:
    post:
      summary: hook for cognito postconfirmation trigger
      responses:
        200:
          description: 'success'
        401:
          description: 'unauthorized'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: 'cognito id token'
          required: true
      security:
        - cogniteUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostUsersConfirmationFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /users/get-userinfo:
    get:
      summary: User情報取得
      responses:
        200:
          description: 'success'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /users/update-userinfo:
    put:
      summary: User情報更新
      responses:
        200:
          description: 'success'
        401:
          description: 'unauthorized'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: 'cognito id token'
          required: true
      security:
        - cogniteUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutUsersFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy


  /users/register-guest:
    post:
      summary: ゲストの本登録
      responses:
        200:
          description: 'success'
        401:
          description: 'unauthorized'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: 'cognito id token'
          required: true
      security:
        - cogniteUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostUsersRegisterGuestFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy


  /users/friends/friend-request:
    post:
      summary: 友達申請
      responses:
        200:
          description: 'success'
        401:
          description: 'unauthorized'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: 'cognito id token'
          required: true
      security:
        - cogniteUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostUsersFriendsFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /users/friends/get-friendlist:
    get:
      summary: 友達リスト取得
      responses:
        200:
          description: 'success'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersFriendsFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /users/friends/delete-friend:
    delete:
      summary: 友達削除
      responses:
        200:
          description: 'success'
        401:
          description: 'unauthorized'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: 'cognito id token'
          required: true
      security:
        - cogniteUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteUsersFriendsFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy


  /users/friends/authorize-friend-request:
    post:
      summary: 友達申請承認/拒否
      responses:
        200:
          description: 'success'
        401:
          description: 'unauthorized'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: 'cognito id token'
          required: true
      security:
        - cogniteUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostUsersFriendsAcceptFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy


  /rules/register-rule:
    post:
      summary: ルール登録
      responses:
        200:
          description: 'success'
        401:
          description: 'unauthorized'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: 'cognito id token'
          required: true
      security:
        - cogniteUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostRulesFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /rules/get-rule:
    get:
      summary: ルール取得
      responses:
        200:
          description: 'success'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRulesFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy


  /matches/start:
    post:
      summary: match開始
      responses:
        200:
          description: 'success'
        401:
          description: 'unauthorized'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: 'cognito id token'
          required: true
      security:
        - cogniteUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostMatchesStartFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy


  /matches/end:
    post:
      summary: match終了
      responses:
        200:
          description: 'success'
        401:
          description: 'unauthorized'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: 'cognito id token'
          required: true
      security:
        - cogniteUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostMatchesEndFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy

  /matches/register-round:
    post:
      summary: round登録
      responses:
        200:
          description: 'success'
        401:
          description: 'unauthorized'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: 'cognito id token'
          required: true
      security:
        - cogniteUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostMatchesRoundFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy

  /matches/delete-round:
    delete:
      summary: round削除
      responses:
        200:
          description: 'success'
        401:
          description: 'unauthorized'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: 'cognito id token'
          required: true
      security:
        - cogniteUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteMatchesRoundFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy

  /matches/delete-match:
    delete:
      summary: round削除
      responses:
        200:
          description: 'success'
        401:
          description: 'unauthorized'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: 'cognito id token'
          required: true
      security:
        - cogniteUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteMatchFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy

  /matches/resume-match:
    get:
      summary: match再開
      responses:
        200:
          description: 'success'
        401:
          description: 'unauthorized'
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: 'cognito id token'
          required: true
      security:
        - cogniteUserPool: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMatchesResumeFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy


  /matches/get-results:
    get:
      summary: 戦績取得(個人)
      responses:
        200:
          description: 'success'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMatchesResultsFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy


  /matches/get-scoreboard:
    get:
      summary: 収支計算
      responses:
        200:
          description: 'success'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMatchesCalculationsFunction.Arn}:live/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
